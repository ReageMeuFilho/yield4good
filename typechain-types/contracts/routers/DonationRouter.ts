/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DonationRouterInterface extends Interface {
  getFunction(nameOrSignature: "donate"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "YieldDonated"): EventFragment;

  encodeFunctionData(
    functionFragment: "donate",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
}

export namespace YieldDonatedEvent {
  export type InputTuple = [
    asset: AddressLike,
    beneficiary: AddressLike,
    amount: BigNumberish,
    caller: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    beneficiary: string,
    amount: bigint,
    caller: string
  ];
  export interface OutputObject {
    asset: string;
    beneficiary: string;
    amount: bigint;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DonationRouter extends BaseContract {
  connect(runner?: ContractRunner | null): DonationRouter;
  waitForDeployment(): Promise<this>;

  interface: DonationRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  donate: TypedContractMethod<
    [asset: AddressLike, beneficiary: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [asset: AddressLike, beneficiary: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "YieldDonated"
  ): TypedContractEvent<
    YieldDonatedEvent.InputTuple,
    YieldDonatedEvent.OutputTuple,
    YieldDonatedEvent.OutputObject
  >;

  filters: {
    "YieldDonated(address,address,uint256,address)": TypedContractEvent<
      YieldDonatedEvent.InputTuple,
      YieldDonatedEvent.OutputTuple,
      YieldDonatedEvent.OutputObject
    >;
    YieldDonated: TypedContractEvent<
      YieldDonatedEvent.InputTuple,
      YieldDonatedEvent.OutputTuple,
      YieldDonatedEvent.OutputObject
    >;
  };
}
